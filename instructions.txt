Installing Typescript Globally with ts nod
	npm install -g typescript ts-node

To update NPM
	npm install -g npm

To get typescript help
	tsc --help

To install code . path for vs-code
	Go to command pallete
	search for install path
		and choose install code command in path.

Installint Prettier Extension
	in settings type
		format on save
			check the option format on save
	
	Configuring prettier to sue single quotes
		single quotes
		Check prettier singlw quote setting

	using two spaces for indentation
		scroll down of default settings and look for
		Editor tab size
		tab size and changing it to 2

	Changing theme search
		workbench color theme
			and changing it soloarized light from bittersweet

	To hide Workbench activity bar
		workbench > Activity bar: visible 
			uncheck the option

Project Steps I am following:
	=> Take a look at the API we'll use to fetch data
	=> create a new project directory
	=> Create a package.json file
	=> install axios to make a request
	=> write code

	API we are using is jsonplaceholder.typicode.com
		Resources 
		and then todo

  Starting Project 
    npm init -y
    npm install axios

I have written some typescript code and I am learning to convert it into JS
Using typescript compiler installed earlier in step 1
		=> tsc index.ts
			=> this will create compiled version of file as inde.js
			=> to execute I can fo node index.js and file will run on terminal

I tried to execute ts-node index.ts
	and it didn't work 
	then I re-install 'npm i ts-node'
	and it worked, for some reason ts node was not installed in first step /

Typescript Theory:
	Syntax and features of the language			vs	Design Patterns with TS
		What is an interface?												How do we use interfaces to write reuseable code?
			When we create interface we 
			create new type inside our
			application and in code e.g that 
			type name was Todo. and then later
			in code we are giving that type
			to response.data

		Syntax for defining interface?






		Goals: 
			Understand basic types in TS ======----> Syntax + features
			Funciton typing _ annotaions ======----> Syntax + features
			Type definition files ======----> Syntax + features
			Arrays in TS  ======----> Syntax + features
			Modules systems ======----> Syntax + features
			Classes + Refreshers on OOP ======----> Syntax + features
			Projects ======----> Syntax + features

				Basic Types:
					Easy way to refer to the differnt properties +
						funcitons that a value(in TS or JS anything we can sssign to a var) has
										===> Its a string				
							red =
										===> It is a value that has all the properties + methods that we assume
												that a string has

								Funcitons belong to string in a JS 	
									charAT()
									charCodeAt()
									concat()
									includes()
									endsWith()
									indexOf()
									lastIndexOf()
									localeCompare()
									match()

								To catergorise everything in one single word we say this is string.

						
						World of Typescript 2 different kinds of types

																	number, boolean, void, undefined							
							Primitive Types:==--> 
																	string, symbol, null

		Types ======->
															functions, arrays				
							Object Types:==--> 
															classes, objects

Why do we care about types?
	Types are used by the typescript compiler to analyze our code for errors
	Types allow other engineers to understand what values are flowing around our codebase


Type annotaions: Code we add to tell Typescript what type of value a variable weill refer to
Type inference: Typescript ries to figure out what types of value a variable refers to


Type inference
	variable declarations								variable Intialization
	const color								=							'red';

	If declaration and initalization are on the same line,
	typescript will figure out the type of 'color' for us

	for e.g. let apples = 5 // this will work with typescript and typescript knows that apples is 5

	but if we do like.
	let apples;
	aplles = 5; // This wont work

	so this line of code is with type annotaions
		let speed: string = 'fast' // string is annotaiton 
		and if we hover on this line and the value that we says is type inference
		Type inference is when typescript is going to guess everything for us

3 scenarios when we need to rely on type annotaitons
		1. When a function returns the 'any' type and we need to carify the value
		2. When we declare a variable on one line then initialize it later	
		3. When we want a variable to have a type that can't be inferred

Type Annotaiton for function:
	Code we add to tekk Typescript what type of arguments a function
	will receive and what type of values it will returns

Type Inference for Functions:
	Typescript tries to figure out what type of value
	a function will return

Typed Arrays:
	Arrays where each element is some consisten type of value

	// Whats big deal about array.
    //TS can fo type inference when extracting values from an array
    //TS can prevent us from adding incompatible values tp the array
    //We can get help with 'map', 'foreach', 'reduce' functions
    //Flexible - arays can still contain multitple different types

Tuples:
	Array like structure where each element represents some property of a record

Interface:
	Interfaces + classes = How we get really strong code reuse in TS

		Creates new type, describing the property names and value types of an object
		

																										oldCivic
		Interface Reportable:												-------Must satisfy the Reportable
						-----Repoertable is a								-------interface to work with
						-----gatekeeper											-------print summary
						-----to print summary										drink
		=>printSummary Funciton


		General Strategy for Reusable Code in TS
			Create function that accept arguments that are typed with intrfaces
			Objects/classes can decide to 'implement' a given interface to work with a function


Classes in Typescript:
	Blueprint to create an object with some fields (values)
	and methods (functions) to represent a 'thing'

			First: Define a set of fields (values) and methods (functions) 
							to represent a 'thing'
			Second: Define a set of fields (values) and methods (functions)
							to represent a 'thing'
		
		Class Inheritance and overriding child Class
				Please look at classes.ts file and see code 
				for inheritance we use 'extend' keyword
				and we can redefine parent class funciton to do somthing different

		public: This method can be called any where, anytime
		private: this method can only be called by other methods in this class
		protected: this method can be called by other methods in 
								this class, or by other methods in child classes

			